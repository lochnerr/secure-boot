#!/bin/sh

set -e

# generate-keys - Script to create UEFI secure boot keys.

# Abort if a platform key exists.
if [ -e certs/PK.key ]; then
	echo "Error: PK.key already exists, aborting!"
	exit 1
fi

# Check for required tools.
required() {
	if [ -z "$(command -v $1 2> /dev/null)" ]; then
		echo "Error: command $1 is not available."
		req="false"
	fi
}
req="true"
for i in openssl cert-to-efi-sig-list cert-to-efi-sig-list efivar ; do required $i ; done
# Additional from: https://sysguides.com/fedora-uefi-secure-boot-with-custom-keys/
[ "$req" != "true" ] && exit 1

# Make a directory for the keys and certificates
mkdir -p certs
cd certs

# Create a globally unique identifier (GUID) to be used in signature lists.
uuidgen --random > GUID.txt
echo "GUID is $(cat GUID.txt)."

# Create a default config for key/cert generation using openssl.
cat >PK.cfg <<-__EOD__
	[ req ]
	default_bits         = 4096
	encrypt_key          = no
	string_mask          = utf8only
	utf8                 = yes
	prompt               = no
	distinguished_name   = my_dist_name
	x509_extensions      = my_x509_exts

	[ my_dist_name ]
	commonName           = Platform Key
	#emailAddress         = user@example.com

	[ my_x509_exts ]
	keyUsage             = digitalSignature
	extendedKeyUsage     = codeSigning
	basicConstraints     = critical,CA:FALSE
	subjectKeyIdentifier = hash
	__EOD__

generate_key() {

	[ "$1" != "PK" ] && cp -v {PK,$1}.cfg
	sed -i "s/Platform Key/$2/g" $1.cfg
	openssl req -x509 -sha256 -days 5490 -outform PEM -config $1.cfg \
		-keyout $1.key -out $1.crt
}

create_esl_and_auth_files() {

	# Create an ESL file from a certificate.
	cert-to-efi-sig-list -g "$(< GUID.txt)" $1.crt $1.esl

	# Now, sign the esl file using the public and private platform keys (PK.crt and PK.key).
	sign-efi-sig-list -g "$(< GUID.txt)" \
		-t "$(date +'%F %T')" \
		-c PK.crt -k PK.key \
		$1 \
		$1.esl $1.auth
}

generate_key PK  "Platform Key"
generate_key KEK "Key Exchange Key"
generate_key db  "Signature Database"

create_esl_and_auth_files PK  $1
create_esl_and_auth_files KEK $1
create_esl_and_auth_files db  $1

# Create 'empty' noPK.auth file for programmatically moving the system out of User Mode.  See man efi-updatevar.
sign-efi-sig-list -g "$(< GUID.txt)" -c PK.crt -k PK.key PK /dev/null noPK.auth

# Notify the user if this system supports enrolling UEFI keys.
if [ "$(efivar -d -n 8be4df61-93ca-11d2-aa0d-00e098032b8c-SetupMode | cut -d ' ' -f 1)" = "1" ]; then
	echo "Info: This system supports enrolling UEFI keys."
	echo "Info: To enroll your new UEFI keys, run: enroll-keys"
else
	echo "Warning: This system does not support enrolling UEFI keys."
fi

echo "Done!"

exit 0

