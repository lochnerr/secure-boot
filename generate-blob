#!/bin/sh

set -e

# generate-blob - Script to generate UEFI secure boot blob.

# Abort if a platform key does not exist.
if [ ! -e keys/PK.key ]; then
  echo "Error: keys/PK.key not found, aborting!"
  exit 1
fi

# Do not allow this to run as root
if [ "$(id -u)" = "0" ]; then
  echo "Error: No reason to run this as root, aborting!"
  exit 1
fi

# Get python utility, if needed.

if [ ! -d python-uefivars ]; then
  git clone https://github.com/awslabs/python-uefivars.git
  sudo dnf install -y python3-pip
  pip install google-crc32c
fi

# Create the uefi-data blob.

rm -f uefi_data_blob.bin

# Include dbx.esl, if there is one.
[ -e keys/dbx.esl ] && dbx="--dbx keys/dbx.esl"
python-uefivars/uefivars.py -i none -o aws -O uefi_data_blob.bin -P keys/PK.esl -K keys/KEK.esl --db keys/db.esl $dbx

# This is a problem...unless a way is found to build a Microsoft blob.

# See: aws-binary-blob-creation WIP

# You still need to sign the images with the db.key and the db.crt after an update, so having a blob makes little sense.

cat <<-__EOD__

The following is a command to register an image with a uefi data blob.

Note: You must update the SnapshotId in the example below.

aws ec2 register-image \
    --name uefi_sb_tpm_register_image_test \
    --block-device-mappings "DeviceName=/dev/sda1,Ebs= {SnapshotId=snap-0123456789example,DeleteOnTermination=true}" \
    --architecture x86_64 --root-device-name /dev/sda1 --virtualization-type hvm â€”ena-support \
    --boot-mode uefi \
    --uefi-data "$(cat uefi_data_blob.bin)"
__EOD__

echo "Done!"

exit 0

